//
// Copyright (C) 2017-2019 Dremio Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

group dremio_java_bean : java_bean;
 
message_block(message, module, options, nested) ::= <<
<if(!nested)>
<message:message_header(message=it, module=module, options=options)>
<endif>

@Generated("<module.generator>")
public <if(nested)>static <endif>final class <message.name> <message:message_extends_declaration(message=it, options=options)> <message:message_impl_declaration(message=it, options=options)>
{
    <message.nestedMessages:message_block(message=it, module=module, options=options, nested="true")>
    <message.nestedEnumGroups:enum_block(eg=it, module=module, options=options, nested="true")>
    <message:message_default_instance(message=it, options=options)>
    <message.fields:field_defaults_declaration(field=it, options=options); separator="\n">
    
    <message.fields:field_declaration(field=it, options=options, modifier="private"); separator="\n">
    <message:message_constructor(message=it, options=options)>
    <message:message_getters_and_setters(message=it, options=options)>
    <message:message_equals_and_hashcode(message=it, options=options)>
    <message:message_to_string(message=it, options=options)>
    <message:message_impl_serializable(message=it, options=options)>
    <message:message_impl_message(message=it, options=options)>
    <message:message_impl_schema(message=it, options=options)>
    
    <if(options.generate_pipe_schema)>
    <message:message_pipe_schema(message=it, options=options)>
    <endif>

    <message:message_extensions(message=it, options=options)>
}

>> 

message_extends_declaration(message, options) ::= <<
<if(options.(message.name + ".extends_declaration"))>
<options.(message.name + ".extends_declaration"); format=" ">
<elseif(message.extraOptions.extends_class)>
extends <message.extraOptions.extends_class>
<else>
<endif>
>>
