/*
 * Copyright (C) 2017-2019 Dremio Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.dremio.exec.store.text;

import static com.dremio.TestBuilder.listOf;

import org.junit.Before;
import org.junit.Test;

import com.dremio.BaseTestQuery;
import com.dremio.common.util.FileUtils;

/**
 * Tests for text files with no header.
 */
public class TestHeaderlessCsv extends BaseTestQuery {

  String root;

  @Before
  public void initialize() throws Exception {
    root = FileUtils.getResourceAsFile("/store/text/data/cars.csv").toURI().toString();
  }

  @Test
  public void testCsvWithAutoGeneratedHeaders() throws Exception {
    String query = String.format("select * from table(dfs_test.\"%s\"(type => 'Text', autoGenerateColumnNames => true, fieldDelimiter => ','))", root);
    testBuilder()
      .sqlQuery(query)
      .unOrdered()
      .baselineColumns("A", "B", "C", "D", "E", "F")
      .baselineValues("bmw", "m3", "2010", "", "good", "")
      .baselineValues("bmw", "m5","2008", "S", "good", "")
      .baselineValues("audi", "s6", "2010", "RS", "bad", "dealer")
      .go();
  }

  @Test
  public void testCsvWithoutColumns() throws Exception {
    String query = String.format("select * from table(dfs_test.\"%s\"(type => 'Text',  fieldDelimiter => ','))", root);
    testBuilder()
      .sqlQuery(query)
      .unOrdered()
      .baselineColumns("columns")
      .baselineValues(listOf("bmw", "m3", "2010", "", "good", ""))
      .baselineValues(listOf("bmw", "m5", "2008", "S", "good", ""))
      .baselineValues(listOf("audi", "s6", "2010", "RS", "bad", "dealer"))
      .go();
  }

  @Test
  public void testCsvWithAutoGeneratedHeadersSkipFirstLine() throws Exception {
    String query = String.format(
      "select * from table(dfs_test.\"%s\"(type => 'Text', autoGenerateColumnNames => true, fieldDelimiter => ',' , skipFirstLine => true))",
      root);
    testBuilder()
      .sqlQuery(query)
      .unOrdered()
      .baselineColumns("A", "B", "C", "D", "E", "F")
      .baselineValues("bmw", "m5","2008", "S", "good", "")
      .baselineValues("audi", "s6", "2010", "RS", "bad", "dealer")
      .go();
  }

}
