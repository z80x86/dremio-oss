//
// Copyright (C) 2017-2019 Dremio Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

group dremio_java_bean : java_bean;
 
message_block(message, module, options, nested) ::= <<
<if(!nested)>
<message:message_header(message=it, module=module, options=options)>
<endif>

@Generated("<module.generator>")
public <if(nested)>static <endif>final class <message.name> <message:message_extends_declaration(message=it, options=options)> <message:message_impl_declaration(message=it, options=options)>
{
    <message.nestedMessages:message_block(message=it, module=module, options=options, nested="true")>
    <message.nestedEnumGroups:enum_block(eg=it, module=module, options=options, nested="true")>
    <message:message_default_instance(message=it, options=options)>
    <message.fields:field_defaults_declaration(field=it, options=options); separator="\n">
    
    <message.fields:field_declaration(field=it, options=options, modifier="private"); separator="\n">
    <message:message_constructor(message=it, options=options)>
    <message:message_getters_and_setters(message=it, options=options)>
    <message:message_equals_and_hashcode(message=it, options=options)>
    <message:message_to_string(message=it, options=options)>
    <message:message_impl_serializable(message=it, options=options)>
    <message:message_impl_message(message=it, options=options)>
    <message:message_impl_schema(message=it, options=options)>
    
    <if(options.generate_pipe_schema)>
    <message:message_pipe_schema(message=it, options=options)>
    <endif>

    <message:message_extensions(message=it, options=options)>
}

>> 

// message_extends_declaration overridden to enable defining the base class with a message option
message_extends_declaration(message, options) ::= <<
<if(options.(message.name + ".extends_declaration"))>
<options.(message.name + ".extends_declaration"); format=" ">
<elseif(message.extraOptions.extends_class)>
extends <message.extraOptions.extends_class>
<else>
<endif>
>>


// field_singular_type, singular_field_merge_switch, singular_field_write_switch overridden to enable refining the type with field option value_type 
// the value type must have a constructor taking the original type and a corresponding to{Type}()

field_singular_type(field, options) ::= <<
<if(field.extraOptions.value_type)>
  <field.extraOptions.value_type>
<elseif(field.required)>
  <map_primitive_wrapper.(field.javaType)>
<elseif(field.numberField)>
  <if(options.primitive_numbers_if_optional)>
    <field.javaType>
  <else>
    <map_primitive_wrapper.(field.javaType)>
  <endif>
<elseif(field.extraOptions.ByteBuffer)>
  ByteBuffer
<else>
  <map_primitive_wrapper.(field.javaType)>
<endif>
>>

singular_field_merge_switch(field, options, name) ::= <<
<name>.<var(val=field.name, fmt="CC", options=options)> = <if(field.extraOptions.value_type)>
new <field.extraOptions.value_type>(<field:singular_value_merge(field=it, options=options)>)
<else>
<field:singular_value_merge(field=it, options=options, name=name)>
<endif>
;
break;
>>

singular_value_merge(field, options, name) ::= <<
<if(field.messageField)>
input.mergeObject(<name>.<var(val=field.name, fmt="CC", options=options)>, <field.javaType>.getSchema())
<elseif(field.enumField)>
<field.javaType>.valueOf(input.readEnum())
<elseif(field.extraOptions.ByteBuffer)>
input.readByteBuffer()
<else>
input.read<field.class.simpleName>()
<endif>
>>

singular_field_write_switch(field, options, name) ::= <<
<if(field.required)>
if(<name>.<var(val=field.name, fmt="CC", options=options)> == null)
    throw new UninitializedMessageException(<name>);
<if(field.messageField)>
output.writeObject(<field.number>, <name>.<var(val=field.name, fmt="CC", options=options)>, <field.javaType>.getSchema(), false);
<elseif(field.enumField)>
output.writeEnum(<field.number>, <name>.<var(val=field.name, fmt="CC", options=options)>.number, false);
<else>
output.write<field.class.simpleName>(<field.number>, <name>.<var(val=field.name, fmt="CC", options=options)><if(field.extraOptions.value_type)>.to<field.javaType>()<endif>, false);
<endif>
<else>
<if(field.messageField)>
<field:singular_field_write_check(field=it, options=options)>
     output.writeObject(<field.number>, <name>.<var(val=field.name, fmt="CC", options=options)>, <field.javaType>.getSchema(), false);
<elseif(field.enumField)>
<field:singular_field_write_check(field=it, options=options)>
     output.writeEnum(<field.number>, <name>.<var(val=field.name, fmt="CC", options=options)>.number, false);
<else>
<field:singular_field_write_check(field=it, options=options)>
    output.write<field.class.simpleName>(<field.number>, <name>.<var(val=field.name, fmt="CC", options=options)><if(field.extraOptions.value_type)>.to<field.javaType>()<endif>, false);
<endif>
<endif>
>>

// field_getters_and_setters overridden to add deprecated annotation

field_getters_and_setters(field, options, message) ::= <<

// <field.name; format="CC">
<if(field.repeated)>
<deprecated_annotation(field=field, options=options)>
public List\<<map_primitive_wrapper.(field.javaType)>\> get<field.name; format="PC">List()
{
    return <var(val=field.name, fmt="CC", options=options)>;
}

<if(!options.no_setters)>
<deprecated_annotation(field=field, options=options)>
public <field:builder_pattern_return_type(field=it, options=options, type=message.name)> set<field.name; format="PC">List(List\<<map_primitive_wrapper.(field.javaType)>\> <var(val=field.name, fmt="CC", options=options)>)
{
    this.<var(val=field.name, fmt="CC", options=options)> = <var(val=field.name, fmt="CC", options=options)>;
    <field:builder_pattern_return(field=it, options=options)>
}

<endif>
<if(options.generate_helper_methods)>
<deprecated_annotation(field=field, options=options)>
public <map_primitive_wrapper.(field.javaType)> get<field.name; format="PC">(int index)
{
    return <var(val=field.name, fmt="CC", options=options)> == null ? null : <var(val=field.name, fmt="CC", options=options)>.get(index);
}
<deprecated_annotation(field=field, options=options)>
public int get<field.name; format="PC">Count()
{
    return <var(val=field.name, fmt="CC", options=options)> == null ? 0 : <var(val=field.name, fmt="CC", options=options)>.size();
}
<deprecated_annotation(field=field, options=options)>
public <field:builder_pattern_return_type(field=it, options=options, type=message.name)> add<field.name; format="PC">(<map_primitive_wrapper.(field.javaType)> <var(val=field.name, fmt="CC", options=options)>)
{
    if(this.<var(val=field.name, fmt="CC", options=options)> == null)
        this.<var(val=field.name, fmt="CC", options=options)> = new ArrayList\<<map_primitive_wrapper.(field.javaType)>\>();
    this.<var(val=field.name, fmt="CC", options=options)>.add(<var(val=field.name, fmt="CC", options=options)>);
    <field:builder_pattern_return(field=it, options=options)>
}

<endif>

<else>
<deprecated_annotation(field=field, options=options)>
public <field:field_singular_type(field=it, options=options)> get<field.name; format="PC">()
{
    return <var(val=field.name, fmt="CC", options=options)>;
}

<if(!options.no_setters)>
<deprecated_annotation(field=field, options=options)>
public <field:builder_pattern_return_type(field=it, options=options, type=message.name)> set<field.name; format="PC">(<field:field_singular_type(field=it, options=options)> <var(val=field.name, fmt="CC", options=options)>)
{
    this.<var(val=field.name, fmt="CC", options=options)> = <var(val=field.name, fmt="CC", options=options)>;
    <field:builder_pattern_return(field=it, options=options)>
}

<endif>

<endif>
>>


deprecated_annotation(field, options) ::= <<
<if(field.extraOptions.deprecated)>@Deprecated <endif>
>>
